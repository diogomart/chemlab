
from PyQt5.QtWidgets import QShortcut, QLabel, QSlider, QCheckBox, QVBoxLayout
from PyQt5.QtCore import pyqtSlot, Qt

from ..qt.qtviewer import CollapsibleBox, SlidersGroup

class AbstractEffect(object):
    '''Interface for a generic post processing effect.
    
    A subclass of AbstractEffect can be used by a
    :class:`~chemlab.graphics.QChemlabWidget` to provide
    post-processing effects such as outlines, gamma correction,
    approximate anti-aliasing, or screen space ambient occlusion.

    '''
    enabled = False
    widget = None
    uis = []
    params_box = None

    def __init__(self, *args, **kwargs):
        pass


    def store_var_f(self,akey,avalue):
        print(akey,avalue)
        setattr(self, akey, avalue)
        self.widget.windows.update()#repaint()
        self.widget.repaint()

    def store_var_i(self,akey,avalue):
        print(akey,avalue)
        setattr(self, akey, avalue)
        self.widget.windows.update()#self.widget.repaint()
        self.widget.repaint()

    def toggle_var(self,akey,avalue):
        setattr(self, akey, 1 if avalue else 0)
        self.widget.windows.update()#self.widget.repaint()
        self.widget.repaint()

    def setUniformSlider(self):
        self.params_box = CollapsibleBox(self.name+" options")#,cb=self.toggle)
        lay = QVBoxLayout()
        for k in self.uniforms:
            e = self.uniforms[k]
            print(k,e)
            if e["type"] == "f" or e["type"] == "i":
                lay.addWidget(QLabel(k))
                stype = "float"
                if e["type"] == "i" :
                    stype = "int"
                _slider = SlidersGroup(Qt.Orientation.Horizontal, "Horizontal",stype=stype,
                                                min=e["min"],max=e["max"],step=e["step"])
                _slider.setValue(e["default"])
                _slider.valueChanged.connect(lambda val,x=k: self.store_var_i(x, val))
                _slider.fvalueChanged.connect(lambda val,x=k: self.store_var_f(x, val))
                #lay.addWidget(QLabel(k))
                #_slider = QSlider(Qt.Orientation.Horizontal)
                #_slider.setRange(e["min"]*1000, e["max"]*1000)
                #_slider.setSingleStep(1)
                #_slider.setValue(e["default"]*1000)
                #_slider.valueChanged.connect(lambda val,x=k: self.store_var_f(x, val))
                lay.addWidget(_slider)
            if e["type"] == "b":
                _button = QCheckBox(k)
                _button.setChecked(True if e["default"] == 1 else False)
                _button.stateChanged.connect(lambda val,x=k: self.toggle_var(x, val))
                lay.addWidget(_button)
        self.params_box.setContentLayout(lay)

    def toggle(self, avalue):
        print("toggle",self.name,avalue)
        self.enabled = avalue
        if self.params_box is not None:
            if avalue : self.params_box.show()
            else : self.params_box.hide()
        self.widget.repaint()

    def set_options(self, **options):
        '''Subclasses should use this method to change the options of
        the effect

        '''
        pass

    def render(self, fb, textures):
        '''Subclasses should override this method to draw the
        post-processing effect by using the framebuffer *fb*
        (represented as an integer generated by glGenFramebuffers).
        
        The textures corresponding to the model rendering and the
        previous post-processing effects are passed through the
        dictionary *textures*. 
        
        The textures passed by default are "color", "depth" and
        "normal" and are instances of
        :class:`chemlab.graphics.Texture`.

        '''
        raise NotImplementedError()

    def on_resize(self, w, h):
        '''Optionally, subclasses can override on_resize. This method
        is useful if the post-processing effect requires additional
        creation of textures that need to hold multiple passes.

        '''
        pass